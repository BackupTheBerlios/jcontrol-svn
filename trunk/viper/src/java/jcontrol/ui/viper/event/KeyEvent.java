/*
 * $Id$
 * 
 * Copyright (C) 2005-2009 The JControl Group and individual authors listed below
 * 
 * This library is free software; you can redistribute it and/or modify it under the terms of the
 * GNU Lesser General Public License as published by the Free Software Foundation; either version
 * 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License along with this library;
 * if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
 * 02111-1307 USA
 */
package jcontrol.ui.viper.event;

/**
 * <p>
 * This event may be generated by the application's top level Frame object when a keyboard key is
 * pressed. It is sent down the component tree through the focus path down to a basic KeyListener
 * component, for example a button.
 * </p>
 * 
 * @author Marcus Timmermann
 * @see jcontrol.ui.viper.event.IKeyListener
 * @since Viper 1.0
 * @version $Revision$
 */
public class KeyEvent implements IEvent {

    /** Indicate that a key was pressed */
    public static final int TYPE_KEY_PRESSED = 8;

    /** Indicate that a key has been released */
    public static final int TYPE_KEY_RELEASED = 0;

    /** Key function UP */
    public final static int KEY_UP = 1;

    /** Key function DOWN */
    public final static int KEY_DOWN = 2;

    /** Key function SELECT */
    public final static int KEY_SELECT = 3;

    /** Key function LEFT */
    public final static int KEY_LEFT = 4;

    /** Key function RIGHT */
    public final static int KEY_RIGHT = 5;

    /** Key function 'transfer focus forward' */
    public final static int KEY_TRANSFER_FOCUS_FORWARD = 6 | TYPE_KEY_PRESSED;

    /** Key function 'transfer focus backward' */
    public final static int KEY_TRANSFER_FOCUS_BACKWARD = 7 | TYPE_KEY_PRESSED;

    public final static int KEY_UP_PRESSED = KEY_UP | TYPE_KEY_PRESSED;
    public final static int KEY_DOWN_PRESSED = KEY_DOWN | TYPE_KEY_PRESSED;
    public final static int KEY_SELECT_PRESSED = KEY_SELECT | TYPE_KEY_PRESSED;
    public final static int KEY_LEFT_PRESSED = KEY_LEFT | TYPE_KEY_PRESSED;
    public final static int KEY_RIGHT_PRESSED = KEY_RIGHT | TYPE_KEY_PRESSED;

    public final static int KEY_UP_RELEASED = KEY_UP | TYPE_KEY_RELEASED;
    public final static int KEY_DOWN_RELEASED = KEY_DOWN | TYPE_KEY_RELEASED;
    public final static int KEY_SELECT_RELEASED = KEY_SELECT | TYPE_KEY_RELEASED;
    public final static int KEY_LEFT_RELEASED = KEY_LEFT | TYPE_KEY_RELEASED;
    public final static int KEY_RIGHT_RELEASED = KEY_RIGHT | TYPE_KEY_RELEASED;

    public int m_key;
    public char m_char;

    /**
     * Constructs a KeyEvent.
     * 
     * @param key The key specified by a constant value
     * @param c The character that was pressed
     */
    public KeyEvent(int key, char c) {
        m_key = key;
        m_char = c;
    }

}